[{"path":"https://torfason.github.io/zulutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Maintainer.","code":""},{"path":"https://torfason.github.io/zulutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason MT (2023). zulutils: Miscellaneous utility functions author found useful. https://torfason.github.io/zulutils, https://github.com/torfason/zulutils, https://torfason.github.io/zulutils/.","code":"@Manual{,   title = {zulutils: Miscellaneous utility functions that the author found useful},   author = {Magnus Thor Torfason},   year = {2023},   note = {https://torfason.github.io/zulutils, https://github.com/torfason/zulutils, https://torfason.github.io/zulutils/}, }"},{"path":[]},{"path":"https://torfason.github.io/zulutils/index.html","id":"miscellaneous-utility-functions-that-the-author-found-useful","dir":"","previous_headings":"","what":"Miscellaneous utility functions that the author found useful","title":"Miscellaneous utility functions that the author found useful","text":"package contains various miscellaneous utility functions author found useful time. free use , YMMV (Mileage May Vary). Versions 0.3.5 higher developed R 4.1 rely new pipe operator (|>), older versions R work.","code":""},{"path":"https://torfason.github.io/zulutils/reference/asciify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert non-ASCII characters to their ASCII equivalents — asciify","title":"Convert non-ASCII characters to their ASCII equivalents — asciify","text":"function replaces non-ASCII characters string ASCII equivalents. supports range European non-ASCII characters, including Icelandic, Swedish, Norwegian, Danish, Finnish, German, Estonian, Latvian, Lithuanian, Polish, Hungarian, Slovenian, Czech, Slovak, Maltese, Romanian, Albanian, Croatian.","code":""},{"path":"https://torfason.github.io/zulutils/reference/asciify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert non-ASCII characters to their ASCII equivalents — asciify","text":"","code":"asciify(x, verify = TRUE)"},{"path":"https://torfason.github.io/zulutils/reference/asciify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert non-ASCII characters to their ASCII equivalents — asciify","text":"x character vector processed. verify logical value indicating whether verify result ASCII. Defaults TRUE. FALSE, function check result ASCII may return non-ASCII characters.","code":""},{"path":"https://torfason.github.io/zulutils/reference/asciify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert non-ASCII characters to their ASCII equivalents — asciify","text":"character vector non-ASCII characters replaced ASCII equivalents.","code":""},{"path":"https://torfason.github.io/zulutils/reference/asciify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert non-ASCII characters to their ASCII equivalents — asciify","text":"","code":"asciify(\"Jón Þór Birgisson\") # \"Jon Thor Birgisson\" #> [1] \"Jon Thor Birgisson\" asciify(\"förståndshandikapp\") # \"forstandshandikapp\" #> [1] \"forstandshandikapp\" asciify(\"Viðareiði\") # \"Vidareidi\" #> [1] \"Vidareidi\" asciify(\"übermensch\") # \"uebermensch\" #> [1] \"ubermensch\" asciify(\"Jürgen Klopp\") # \"Juergen Klopp\" #> [1] \"Jurgen Klopp\" asciify(\"rõõmsameelsus\") # \"roomsameelsus\" #> [1] \"roomsameelsus\" asciify(\"Mężczyzna\") # \"Mezczyzna\" #> [1] \"Mezczyzna\" asciify(\"Škoda\") # \"Skoda\" #> [1] \"Skoda\""},{"path":"https://torfason.github.io/zulutils/reference/bgrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Boolean grep function — bgrep","title":"Boolean grep function — bgrep","text":"function looks pattern elements string, returning TRUE element contains pattern, FALSE elements. function thin wrapper around stringr::str_detect()","code":""},{"path":"https://torfason.github.io/zulutils/reference/bgrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boolean grep function — bgrep","text":"","code":"bgrep(string, pattern)"},{"path":"https://torfason.github.io/zulutils/reference/bgrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boolean grep function — bgrep","text":"string (possibly vectorized) string process. pattern (possibly vectorized) regexp pattern use.","code":""},{"path":"https://torfason.github.io/zulutils/reference/bgrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boolean grep function — bgrep","text":"vector boolean values indicating elements string matched corresponding elements pattern.","code":""},{"path":"https://torfason.github.io/zulutils/reference/catty.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a catty vector — catty","title":"Construct a catty vector — catty","text":"catty() constructs catty vector (class zmisc_catty).  catty vector character vector uses cat() print output, rather standard print() command. Apart , behaves like standard character vector. Objects class convenient return values functions generally just print desired value without index information normal print command. happens function returning catty object called interactively. However, return value can also assigned variable later use, making flexible function output text directly.","code":""},{"path":"https://torfason.github.io/zulutils/reference/catty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a catty vector — catty","text":"","code":"catty(x, sep = \" \")"},{"path":"https://torfason.github.io/zulutils/reference/catty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a catty vector — catty","text":"x character vector want behave catty manner. sep separator output elements catty vector.","code":""},{"path":"https://torfason.github.io/zulutils/reference/catty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a catty vector — catty","text":"catty vector.","code":""},{"path":"https://torfason.github.io/zulutils/reference/catty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a catty vector — catty","text":"","code":"x <- catty(letters) x #> a b c d e f g h i j k l m n o p q r s t u v w x y z y <- catty(month.name, sep=\"\\n\") y #> January #> February #> March #> April #> May #> June #> July #> August #> September #> October #> November #> December"},{"path":"https://torfason.github.io/zulutils/reference/cb_apply_col_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a col_spec to a data.frame — cb_apply_col_spec","title":"Apply a col_spec to a data.frame — cb_apply_col_spec","text":"cb_apply_col_spec() applies column definitions contained col_spec object (typically created using readr::cols()), chosen columns data.frame. NOTE: currently implemented column specifications specifying conversion factor variable.","code":""},{"path":"https://torfason.github.io/zulutils/reference/cb_apply_col_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a col_spec to a data.frame — cb_apply_col_spec","text":"","code":"cb_apply_col_spec(   d,   cspec,   warn_missing_levels = TRUE,   set_spec_attribute = FALSE,   set_problems_attribute = TRUE )"},{"path":"https://torfason.github.io/zulutils/reference/cb_apply_col_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a col_spec to a data.frame — cb_apply_col_spec","text":"d data.frame col_spec applied. cspec col_spec apply. warn_missing_levels Warn values d match levels corresponding factor. set_spec_attribute spec attribute result set col_spec (compatibility readr behavior). set_problems_attribute problems attributes result set case problems parsing.","code":""},{"path":"https://torfason.github.io/zulutils/reference/cb_apply_col_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a col_spec to a data.frame — cb_apply_col_spec","text":"data.frame based d, corresponding columns changed according values specified cspec","code":""},{"path":"https://torfason.github.io/zulutils/reference/cb_as_col_spec_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct code to use as col_spec for factors — cb_as_col_spec_factors","title":"Construct code to use as col_spec for factors — cb_as_col_spec_factors","text":"function examines character columns data.frame (typically one read comma separated text file using reader function readdr::read_csv()), generates specification suitable reading columns underlying file factors. key benefit find variables using factor levels group together, editing col_spec reorder factor levels make changes straightforward. result returned catty vector provide readable output default. output can edited col_spec used read data fresh CSV file. Assuming cols() result assigned variable cspec, one might following:","code":"d <- read_csv(csv_file) cb_as_col_spec_factors(d) # edit the output to fit your needs cspec <- cols(...) d <- read_csv(csv_file, col_types=cspec)"},{"path":"https://torfason.github.io/zulutils/reference/cb_as_col_spec_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct code to use as col_spec for factors — cb_as_col_spec_factors","text":"","code":"cb_as_col_spec_factors(d)"},{"path":"https://torfason.github.io/zulutils/reference/cb_as_col_spec_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct code to use as col_spec for factors — cb_as_col_spec_factors","text":"d data.frame use generating col_spec.","code":""},{"path":"https://torfason.github.io/zulutils/reference/cb_as_col_spec_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct code to use as col_spec for factors — cb_as_col_spec_factors","text":"catty string column definitions, suitable defining col_spec, needed editing reorder factors.","code":""},{"path":"https://torfason.github.io/zulutils/reference/check_ties.html","id":null,"dir":"Reference","previous_headings":"","what":"Check voting ties for errors — check_ties","title":"Check voting ties for errors — check_ties","text":"Compares voting scores last seat first seat , use seat calculation functions. check assumes calling function correctly assigns tied seats first listed party, depending value ties parameter, can either error (clean dirty ties ties==\"error\"), warn (dirty ties ties==\"first\").","code":""},{"path":"https://torfason.github.io/zulutils/reference/check_ties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check voting ties for errors — check_ties","text":"","code":"check_ties(score_last_in, score_first_out, ties)"},{"path":"https://torfason.github.io/zulutils/reference/check_ties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check voting ties for errors — check_ties","text":"score_last_in score last seat allocated score_first_out score first seat allocated ties ties cause \"error\" \"first\" chosen","code":""},{"path":"https://torfason.github.io/zulutils/reference/dhondt.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate discrete seats given continuous votes — dhondt","title":"Allocate discrete seats given continuous votes — dhondt","text":"dhondt() function can used allocate discrete number seats (resources) parties according continuous number votes (claims resource), way approximates proportionality. Semi-proportionality achieved D'Hondt method, commonly used approach electoral allocation. implementations D'Hondt allocation R can found electoral::seats_ha() coalitions::dHondt(). motivation behind implementation simple interface reasonable defaults, suitable use pipes operating data data.frames tibbles. error handling also explicit implementations. Finally, party names optional, useful natural names parties. largest_remainder() allocates votes way parallel dhondt() function, using least remainder method, instead greatest divisors method. alternative implementation exists electoral::seats_lr(), possibly coalitions::hare_niemeyer(). rationale implementation function comparable dhondt().","code":""},{"path":"https://torfason.github.io/zulutils/reference/dhondt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate discrete seats given continuous votes — dhondt","text":"","code":"dhondt(votes, seats = 7, ties = c(\"error\", \"first\"))  largest_remainder(votes, seats = 7, ties = c(\"error\", \"first\"))"},{"path":"https://torfason.github.io/zulutils/reference/dhondt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate discrete seats given continuous votes — dhondt","text":"votes vector votes different parties. number parties determined based length vector. Votes can given whole real numbers, requirement sum 1 100. seats integer giving number seats allocate. Defaults 7, common size boards deliberative bodies (pretty nice number general), one almost always want specify . ties character variable specifying case ties. D'Hondt method specify tie handling, two options allowed. Specifying \"error\" (default) results error tie marginal allocated seat. Specifying \"first\" means party comes first (votes vector) wins. Methods allocating randomly favoring largest party can achieved ordering votes vector prior calling function.","code":""},{"path":"https://torfason.github.io/zulutils/reference/dhondt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate discrete seats given continuous votes — dhondt","text":"integer vector allocations seats parties, order parties specified votes vector. length result vector always equals length votes vector. sum result vector always equals value seats. votes vector names, results vector names.","code":""},{"path":"https://torfason.github.io/zulutils/reference/dhondt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate discrete seats given continuous votes — dhondt","text":"","code":"dhondt(c(13,11,7,5,3)) #> [1] 3 2 1 1 0 dhondt(c(liberals=4876, conservatives=5212, greens=2349), seats=21) #>      liberals conservatives        greens  #>             8             9             4   largest_remainder(c(13,11,7,5,3)) #> [1] 2 2 1 1 1 largest_remainder(c(liberals=4876, conservatives=5212, greens=2349), seats=21) #>      liberals conservatives        greens  #>             8             9             4"},{"path":"https://torfason.github.io/zulutils/reference/exposition_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposition pipe operator — %$%","title":"Exposition pipe operator — %$%","text":"See %$% magrittr package details.","code":""},{"path":"https://torfason.github.io/zulutils/reference/exposition_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposition pipe operator — %$%","text":"","code":"lhs %$% rhs"},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the size of a drake target — get_drake_target_size","title":"Return the size of a drake target — get_drake_target_size","text":"function returns size given drake target.","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the size of a drake target — get_drake_target_size","text":"","code":"get_drake_target_size(target)"},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the size of a drake target — get_drake_target_size","text":"target Name target","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the size of a drake target — get_drake_target_size","text":"Size target","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the size of all targets in a drake plan — get_drake_target_sizes","title":"Return the size of all targets in a drake plan — get_drake_target_sizes","text":"function returns size targets given drake plan","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the size of all targets in a drake plan — get_drake_target_sizes","text":"","code":"get_drake_target_sizes(my_plan)"},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the size of all targets in a drake plan — get_drake_target_sizes","text":"my_plan Name plan get target names","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_drake_target_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the size of all targets in a drake plan — get_drake_target_sizes","text":"Tibble containing names sizes targets","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_labels_enframed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the variable labels of a labelled tibble in an enframed tibble — get_labels_enframed","title":"Get the variable labels of a labelled tibble in an enframed tibble — get_labels_enframed","text":"Given data tibble/data.frame, function return tibble enframed format (two columns named name value, see tibble::enframe() details), name column contains names variables original tibble value column contains labels. can used review labels, (coupled set_labels_enframed() function, currently implemented) used preserve labels across label-destructive operations, export labels file (sheet excel file). Finally, used conjunction zmisc::lookup() dplyr::rename_with() pipe rename variables order replace names variables labels display plot table function support display labels simple way.","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_labels_enframed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the variable labels of a labelled tibble in an enframed tibble — get_labels_enframed","text":"","code":"get_labels_enframed(d)"},{"path":"https://torfason.github.io/zulutils/reference/get_labels_enframed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the variable labels of a labelled tibble in an enframed tibble — get_labels_enframed","text":"d tibble whose columns variable labels.","code":""},{"path":"https://torfason.github.io/zulutils/reference/get_labels_enframed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the variable labels of a labelled tibble in an enframed tibble — get_labels_enframed","text":"tibble enframed format containing variable names labels.","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","title":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","text":"Applies string function fun label present plot object p, well character factor variables underlying data. function, fun, accept return character vectors. can either simple prettifying function can perform complex lookup replace variable names variable labels. variables factors, converted character applying function reconverted factor. Care taken preserve factor ordering.","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","text":"","code":"gg_apply(p, fun, ..., .labs = TRUE, .vars = TRUE)"},{"path":"https://torfason.github.io/zulutils/reference/gg_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","text":"p ggplot2 object fun function applied labels p ... variables passed fun .labs logical character, indicating whether apply function labels p. TRUE, apply character factor variables p. FALSE, NULL empty vector, apply function variables. character vector containing names variables, apply function particular variables. error may thrown vector refers non-existing labels. Defaults TRUE. .vars logical character. TRUE, apply character factor variables p. FALSE, NULL empty vector, apply function variables. character vector containing names variables, apply function particular variables. error may thrown vector refers non-existing variables variables neither characters factors. Defaults TRUE.","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","text":"ggplot2 object changed labels","code":""},{"path":[]},{"path":"https://torfason.github.io/zulutils/reference/gg_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to each label and character/factor variable in the plot object. — gg_apply","text":"","code":"# This uses snakecase::to_sentence_case to prettify the labels # Note: The plot is assigned to a named variable before piping to gg_apply_labs() #       This is to avoid issues due to the precedence of operators, #       (%>% has higher precedence than +) library(dplyr, warn.conflicts=FALSE) library(ggplot2) library(forcats) library(snakecase) p <- starwars %>%     filter(mass < 1000) %>%     mutate(species = species %>% fct_infreq %>%  fct_lump(5) %>% fct_explicit_na) %>%     ggplot(aes(height, mass, color=species, size=birth_year)) +     geom_point() #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `species = species %>% fct_infreq %>% fct_lump(5) %>% #>   fct_explicit_na`. #> Caused by warning: #> ! `fct_explicit_na()` was deprecated in forcats 1.0.0. #> ℹ Please use `fct_na_value_to_level()` instead. p %>% gg_apply(snakecase::to_sentence_case) #> Warning: Removed 23 rows containing missing values (`geom_point()`)."},{"path":"https://torfason.github.io/zulutils/reference/gg_apply_labs.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a string function to each label present in the plot object — gg_apply_labs","title":"Apply a string function to each label present in the plot object — gg_apply_labs","text":"Applies string function fun label present plot object p. function, fun`, accept return character vectors. can either simple prettifying function can perform complex lookup replace variable names variable labels","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_apply_labs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a string function to each label present in the plot object — gg_apply_labs","text":"","code":"gg_apply_labs(p, fun)"},{"path":"https://torfason.github.io/zulutils/reference/gg_apply_labs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a string function to each label present in the plot object — gg_apply_labs","text":"p ggplot2 object fun function applied labels p","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_apply_labs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a string function to each label present in the plot object — gg_apply_labs","text":"ggplot2 object changed labels","code":""},{"path":[]},{"path":"https://torfason.github.io/zulutils/reference/gg_apply_labs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a string function to each label present in the plot object — gg_apply_labs","text":"","code":"# This uses snakecase::to_sentence_case to prettify the labels # Note: The plot is assigned to a named variable before piping to gg_apply_labs() #       This is to avoid issues due to the precedence of operators, #       (%>% has higher precedence than +) library(dplyr, warn.conflicts=FALSE) library(ggplot2) library(forcats) library(snakecase) p <- starwars %>%     filter(mass < 1000) %>%     mutate(species = species %>% fct_infreq %>%  fct_lump(5) %>% fct_explicit_na) %>%     ggplot(aes(height, mass, color=species, size=birth_year)) +     geom_point() suppressWarnings(   p %>% gg_apply_labs(snakecase::to_sentence_case) ) #> Warning: Removed 23 rows containing missing values (`geom_point()`)."},{"path":"https://torfason.github.io/zulutils/reference/gg_integer_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply integer breaks to a graph. — gg_integer_breaks","title":"Apply integer breaks to a graph. — gg_integer_breaks","text":"Calculates vector breaks contains integers 0 max(x) (little bit extra headroom case maximum element integer)","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_integer_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply integer breaks to a graph. — gg_integer_breaks","text":"","code":"gg_integer_breaks(x)"},{"path":"https://torfason.github.io/zulutils/reference/gg_integer_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply integer breaks to a graph. — gg_integer_breaks","text":"x input vector breaks calculated. Note fancy NSE , actual variable must passed function, also function currently handle negative data error passed data.","code":""},{"path":"https://torfason.github.io/zulutils/reference/gg_integer_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply integer breaks to a graph. — gg_integer_breaks","text":"vector breaks suitable use ggplot breaks parameter.","code":""},{"path":[]},{"path":"https://torfason.github.io/zulutils/reference/gg_integer_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply integer breaks to a graph. — gg_integer_breaks","text":"","code":"if ( require(ggplot2) ) {   ggplot(mtcars) +     aes(wt,drat) +     geom_point() +     scale_y_continuous(breaks=gg_integer_breaks(mtcars$drat)) }"},{"path":"https://torfason.github.io/zulutils/reference/identity_ellipsis.html","id":null,"dir":"Reference","previous_headings":"","what":"Return argument unchanged — identity_ellipsis","title":"Return argument unchanged — identity_ellipsis","text":"can often useful (developing pipelines example), access function simply returns element receives. base::identity() function works well one argument, cases following arguments ignored. cases identity_ellipsis() function can come handy. function previously called noop() name now deprecated.","code":""},{"path":"https://torfason.github.io/zulutils/reference/identity_ellipsis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return argument unchanged — identity_ellipsis","text":"","code":"identity_ellipsis(x, ...)  noop(x, ...)"},{"path":"https://torfason.github.io/zulutils/reference/identity_ellipsis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return argument unchanged — identity_ellipsis","text":"x single argument () process. ... arguments ignored","code":""},{"path":"https://torfason.github.io/zulutils/reference/identity_ellipsis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return argument unchanged — identity_ellipsis","text":"argument x returned unchanged.","code":""},{"path":"https://torfason.github.io/zulutils/reference/lappend.html","id":null,"dir":"Reference","previous_headings":"","what":"Append individual values to a list — lappend","title":"Append individual values to a list — lappend","text":"passed two lists, standard append() function concatenate lists, rather treating second list value appended list. contrast, lappend() function always append individual values list (making sure element encapsulated list using base::append() put original list). Importantly, approach correctly allows adding data.frame list, whereas calling base::append() directly add column separate element.","code":""},{"path":"https://torfason.github.io/zulutils/reference/lappend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append individual values to a list — lappend","text":"","code":"lappend(l, ..., .after = length(l))"},{"path":"https://torfason.github.io/zulutils/reference/lappend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append individual values to a list — lappend","text":"l list append . ... One values appended list, separate list element. .position append.","code":""},{"path":"https://torfason.github.io/zulutils/reference/lappend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append individual values to a list — lappend","text":"list specified values appended correct position.","code":""},{"path":"https://torfason.github.io/zulutils/reference/lappend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append individual values to a list — lappend","text":"","code":"l <- list() l <- append(l, cars) l <- append(l, mtcars) length(l) # l is a list of 13 vectors #> [1] 13  l <- list() l <- lappend(l, cars) l <- lappend(l, mtcars) length(l) # l is a list of 2 data.frames #> [1] 2"},{"path":"https://torfason.github.io/zulutils/reference/mutate_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","title":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","text":"mutate_cond() function allows simple conditional mutations data.frames combining conditional select rows, followed dplyr::mutate() syntax specify change columns. function inspired , based , function proposed discussion Stack Overflow. function, however, extends original mutate_cond() function proposed thread falling back using base::transform() dplyr package installed.","code":""},{"path":"https://torfason.github.io/zulutils/reference/mutate_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","text":"","code":"mutate_cond(   .data,   .condition,   ...,   .envir = parent.frame(),   .method = c(\"default\", \"dplyr\", \"base\") )"},{"path":"https://torfason.github.io/zulutils/reference/mutate_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","text":".data data.frame mutate. .condition Conditional statement determining rows modify. ... One statements determining columns mutate . .envir environment use evaluation. .method underlying method use mutation. Acceptable values : \"default\", default, uses dplyr::mutate() available, falls back base::transform() (warning) . \"dplyr\" uses dplyr::mutate() throws error available. \"base\" always uses base::transform().","code":""},{"path":"https://torfason.github.io/zulutils/reference/mutate_cond.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","text":"named parameters prefixed . reduce probability conflict column names mutated, specified ... parameter. function relies either dplyr::mutate() available, base::transform() dplyr package available. Specifying multiple mutations ... allowed, , , important aware differences mutate() transform(). two functions similar, apart fact mutate() executes transformations iterative manner, later transformations can use columns created earlier transformations, whereas transform() uses values original data.frame, regardless number steps.","code":""},{"path":"https://torfason.github.io/zulutils/reference/mutate_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate only rows of data.frame/tibble that satisfy condition — mutate_cond","text":"","code":"# Set dist to 3 where speed is 7 or less result <- mutate_cond(cars, speed<=7, dist=3) head(result) #>   speed dist #> 1     4    3 #> 2     4    3 #> 3     7    3 #> 4     7    3 #> 5     8   16 #> 6     9   10"},{"path":"https://torfason.github.io/zulutils/reference/na_if_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace values in x that are contained in y with NA. — na_if_in","title":"Replace values in x that are contained in y with NA. — na_if_in","text":"function variant/extension dplyr::na_if(). Whereas version requires y length one, function allows y vector replaces elements x found y NA values. function can useful cleaning data setting multiple annoying values NA.","code":""},{"path":"https://torfason.github.io/zulutils/reference/na_if_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace values in x that are contained in y with NA. — na_if_in","text":"","code":"na_if_in(x, y)"},{"path":"https://torfason.github.io/zulutils/reference/na_if_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace values in x that are contained in y with NA. — na_if_in","text":"x Vector modify. y Value replace NA.","code":""},{"path":"https://torfason.github.io/zulutils/reference/na_if_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace values in x that are contained in y with NA. — na_if_in","text":"modified version x replaces values found y NA.","code":""},{"path":[]},{"path":"https://torfason.github.io/zulutils/reference/na_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace missing values — na_replace","title":"Replace missing values — na_replace","text":"Replaces NA values found vector specified scalar value NOTE: dplyr::coalesce() function now provides functionality general way, function may merit deprecation.","code":""},{"path":"https://torfason.github.io/zulutils/reference/na_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace missing values — na_replace","text":"","code":"na_replace(x, replace)"},{"path":"https://torfason.github.io/zulutils/reference/na_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace missing values — na_replace","text":"x Vector possibly containing missing (NA) values. replace Scalar replacement value.","code":""},{"path":"https://torfason.github.io/zulutils/reference/na_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace missing values — na_replace","text":"Copy x missing values replaced replace.","code":""},{"path":[]},{"path":"https://torfason.github.io/zulutils/reference/notate.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed factor levels and value labels in values. — notate","title":"Embed factor levels and value labels in values. — notate","text":"function adds level/label information annotation either factors labelled variables. function called notate() rather annotate() avoid conflict ggplot2::annotate(). generic can operate either individual vectors data.frame. printing labelled variables tibble console, numeric value text label shown, variable labels. using View() function, variable labels shown value labels. factors, way view integer levels values time. order allow viewing variable value labels time, function converts factor labelled variables character, including numeric levels (labelled values) character values (labelled labels) output.","code":""},{"path":"https://torfason.github.io/zulutils/reference/notate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed factor levels and value labels in values. — notate","text":"","code":"notate(x)"},{"path":"https://torfason.github.io/zulutils/reference/notate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed factor levels and value labels in values. — notate","text":"x object (either vector date.frame vectors), one desires annotate /view.","code":""},{"path":"https://torfason.github.io/zulutils/reference/notate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed factor levels and value labels in values. — notate","text":"processed data.frame, suitable viewing, particular View() function.","code":""},{"path":"https://torfason.github.io/zulutils/reference/notate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Embed factor levels and value labels in values. — notate","text":"","code":"labs <- d <- data.frame(   chr = letters[1:4],   fct = factor(c(\"alpha\", \"bravo\", \"chrly\", \"delta\")),   lbl = ll_labelled(c(1, 2, 3, NA),                     labels = c(one=1, two=2),                     label = \"A labelled vector\") ) #> Error in ll_labelled(c(1, 2, 3, NA), labels = c(one = 1, two = 2), label = \"A labelled vector\"): could not find function \"ll_labelled\" dn <- notate(d) #> Error in eval(expr, envir, enclos): object 'd' not found dn #> Error in eval(expr, envir, enclos): object 'dn' not found # View(dn)"},{"path":"https://torfason.github.io/zulutils/reference/nth_prime.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and return the nth prime number — nth_prime","title":"Calculate and return the nth prime number — nth_prime","text":"function use primes package unless either missing, options(\"zulutils.zerodeps\") explicitly set false, case use local implementation sieve Erastosthenes.","code":""},{"path":"https://torfason.github.io/zulutils/reference/nth_prime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and return the nth prime number — nth_prime","text":"","code":"nth_prime(n)"},{"path":"https://torfason.github.io/zulutils/reference/nth_prime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and return the nth prime number — nth_prime","text":"n position prime number calculated","code":""},{"path":"https://torfason.github.io/zulutils/reference/nth_prime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and return the nth prime number — nth_prime","text":"nth prime number","code":""},{"path":"https://torfason.github.io/zulutils/reference/nth_prime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and return the nth prime number — nth_prime","text":"","code":"nth_prime(1) # 2 #> [1] 2 nth_prime(10) # 29 #> Loading required namespace: primes #> [1] 29 nth_prime(100) # 541 #> [1] 541 nth_prime(1000) # 7919 #> [1] 7919 nth_prime(10000) # 104729 #> [1] 104729"},{"path":"https://torfason.github.io/zulutils/reference/padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad string with space or other characters — padding","title":"Pad string with space or other characters — padding","text":"Left right pad string space characters order get string certain length. function thin wrapper around stringr::str_pad().","code":""},{"path":"https://torfason.github.io/zulutils/reference/padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad string with space or other characters — padding","text":"","code":"lpad(string, width, pad = \" \")  rpad(string, width, pad = \" \")"},{"path":"https://torfason.github.io/zulutils/reference/padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad string with space or other characters — padding","text":"string Character vector pad. width many characters minimum output. pad string pad .","code":""},{"path":"https://torfason.github.io/zulutils/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See %>% magrittr package details.","code":""},{"path":"https://torfason.github.io/zulutils/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://torfason.github.io/zulutils/reference/print.zmisc_catty.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a catty vector — print.zmisc_catty","title":"Print a catty vector — print.zmisc_catty","text":"print.zmisc_catty(x, ...) prints catty vector (using cat() instead print() output).","code":""},{"path":"https://torfason.github.io/zulutils/reference/print.zmisc_catty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a catty vector — print.zmisc_catty","text":"","code":"# S3 method for zmisc_catty print(x, ...)"},{"path":"https://torfason.github.io/zulutils/reference/print.zmisc_catty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a catty vector — print.zmisc_catty","text":"x catty vector ... arguments print (ignored)","code":""},{"path":"https://torfason.github.io/zulutils/reference/print.zmisc_catty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a catty vector — print.zmisc_catty","text":"input returned invisibly.","code":""},{"path":"https://torfason.github.io/zulutils/reference/rename_enframed.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename tibble columns according to values in another tibble. — rename_enframed","title":"Rename tibble columns according to values in another tibble. — rename_enframed","text":"function renames variables d according columns d.enframed, enframed format (two columns named name value, see tibble::enframe() details). rename according d.enframed$name, according d.enframed$value NOTE: function may merit deprecation, dplyr::rename_with(), coupled lookup(), deals quite well use-case (general).","code":"d.enframed = tibble::enframe(c(a=\"New A\", b=\"New B\"))"},{"path":"https://torfason.github.io/zulutils/reference/rename_enframed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename tibble columns according to values in another tibble. — rename_enframed","text":"","code":"rename_enframed(d, d.enframed)"},{"path":"https://torfason.github.io/zulutils/reference/rename_enframed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename tibble columns according to values in another tibble. — rename_enframed","text":"d tibble whose columns want rename. d.enframed enframed tibble old new names.","code":""},{"path":"https://torfason.github.io/zulutils/reference/rename_enframed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename tibble columns according to values in another tibble. — rename_enframed","text":"tibble identical d renamed columns.","code":""},{"path":"https://torfason.github.io/zulutils/reference/sample_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a set of strings, each string of a given length — sample_strings","title":"Sample a set of strings, each string of a given length — sample_strings","text":"Sample set strings, string given length","code":""},{"path":"https://torfason.github.io/zulutils/reference/sample_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a set of strings, each string of a given length — sample_strings","text":"","code":"sample_strings(nchar = 3, size = 1, upper = FALSE)"},{"path":"https://torfason.github.io/zulutils/reference/sample_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a set of strings, each string of a given length — sample_strings","text":"nchar length string. size number strings. upper strings upper case?","code":""},{"path":"https://torfason.github.io/zulutils/reference/sample_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a set of strings, each string of a given length — sample_strings","text":"random vector size strings length nchar.","code":""},{"path":"https://torfason.github.io/zulutils/reference/sample_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a set of strings, each string of a given length — sample_strings","text":"","code":"set.seed(42) sample_strings() #> [1] \"xyh\" d <- data.frame(key = sample_strings(7,9), value=1:9) d[order(d$key),] #>       key value #> 4 cnkxlvt     4 #> 3 dmoxdzy     3 #> 8 kubtreg     8 #> 2 lsygmyz     2 #> 9 nrztowe     9 #> 5 vkravaf     5 #> 1 vqntdrs     1 #> 6 xpjlazl     6 #> 7 yxqzqij     7"},{"path":"https://torfason.github.io/zulutils/reference/se.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard error (of the mean estimate) of a vector — se","title":"Calculate standard error (of the mean estimate) of a vector — se","text":"creating need function.","code":""},{"path":"https://torfason.github.io/zulutils/reference/se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard error (of the mean estimate) of a vector — se","text":"","code":"se(x, na.rm = FALSE)"},{"path":"https://torfason.github.io/zulutils/reference/se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard error (of the mean estimate) of a vector — se","text":"x numeric vector, type allowable sd() function. na.rm logical indicating whether missing values removed.","code":""},{"path":"https://torfason.github.io/zulutils/reference/se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standard error (of the mean estimate) of a vector — se","text":"standard error mean estimate x","code":""},{"path":"https://torfason.github.io/zulutils/reference/sieve_primes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all primes up to a given positive integer — sieve_primes","title":"Find all primes up to a given positive integer — sieve_primes","text":"function implements Sieve Eratosthenes algorithm find prime numbers given positive integer n. returns vector integers representing prime numbers.","code":""},{"path":"https://torfason.github.io/zulutils/reference/sieve_primes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all primes up to a given positive integer — sieve_primes","text":"","code":"sieve_primes(n)"},{"path":"https://torfason.github.io/zulutils/reference/sieve_primes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all primes up to a given positive integer — sieve_primes","text":"n positive integer specifying upper limit prime numbers.","code":""},{"path":"https://torfason.github.io/zulutils/reference/sieve_primes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all primes up to a given positive integer — sieve_primes","text":"numeric vector prime numbers n.","code":""},{"path":"https://torfason.github.io/zulutils/reference/sieve_primes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all primes up to a given positive integer — sieve_primes","text":"","code":"zulutils:::sieve_primes(10) #> [1] 2 3 5 7 zulutils:::sieve_primes(20) #> [1]  2  3  5  7 11 13 17 19"},{"path":"https://torfason.github.io/zulutils/reference/strh.html","id":null,"dir":"Reference","previous_headings":"","what":"A modified version of the str() function that limits the length of displayed lists. — strh","title":"A modified version of the str() function that limits the length of displayed lists. — strh","text":"modified version str() function limits length displayed lists.","code":""},{"path":"https://torfason.github.io/zulutils/reference/strh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A modified version of the str() function that limits the length of displayed lists. — strh","text":"","code":"strh(object, max.level = 1, list.len = nth_prime(5 - max.level), ...)"},{"path":"https://torfason.github.io/zulutils/reference/strh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A modified version of the str() function that limits the length of displayed lists. — strh","text":"object object printed. max.level maximum number nested levels printed. Default 1. list.len maximum number elements printed list. Default determined value max.level nth prime number. ... additional arguments passed str().","code":""},{"path":"https://torfason.github.io/zulutils/reference/strh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A modified version of the str() function that limits the length of displayed lists. — strh","text":"printed representation object.","code":""},{"path":"https://torfason.github.io/zulutils/reference/suppress_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress warnings that match specific regular expressions — suppress_warnings","title":"Suppress warnings that match specific regular expressions — suppress_warnings","text":"Based stack overflow answer, except allow function arguments, regular expressions. removes dependency non-base-R packages.","code":""},{"path":"https://torfason.github.io/zulutils/reference/suppress_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress warnings that match specific regular expressions — suppress_warnings","text":"","code":"suppress_warnings(expr, regexp)"},{"path":"https://torfason.github.io/zulutils/reference/tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the tibble package to ensure awareness of tibbles. — tibble","title":"Load the tibble package to ensure awareness of tibbles. — tibble","text":"See tibble::tibble details.","code":""},{"path":"https://torfason.github.io/zulutils/reference/type_convert_with_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column types according to a col_spec — type_convert_with_labels","title":"Convert column types according to a col_spec — type_convert_with_labels","text":"Custom wrapper around readr::type_convert() suppresses warnings copies labels, order (mostly) match behavior cb_apply_col_spec(). without re-implementing lot functionality.","code":""},{"path":"https://torfason.github.io/zulutils/reference/type_convert_with_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column types according to a col_spec — type_convert_with_labels","text":"","code":"type_convert_with_labels(df, col_types = NULL, ...)"},{"path":"https://torfason.github.io/zulutils/reference/type_convert_with_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column types according to a col_spec — type_convert_with_labels","text":"df data.frame process. col_types col_spec apply. ... arguments readr::type_convert().","code":""},{"path":"https://torfason.github.io/zulutils/reference/type_convert_with_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column types according to a col_spec — type_convert_with_labels","text":"data.frame based d, factor columns specified col_types converted factor  columns processed according functionality readr::type_convert()","code":""},{"path":"https://torfason.github.io/zulutils/reference/type_convert_with_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert column types according to a col_spec — type_convert_with_labels","text":"known key difference compared cb_apply_col_spec() df fully processed according col_types argument, meaning columns may converted addition factor columns.","code":""},{"path":"https://torfason.github.io/zulutils/reference/validate.zmisc_catty.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal validation function for catty objects — validate.zmisc_catty","title":"Internal validation function for catty objects — validate.zmisc_catty","text":"Internal validation function catty objects","code":""},{"path":"https://torfason.github.io/zulutils/reference/validate.zmisc_catty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal validation function for catty objects — validate.zmisc_catty","text":"","code":"validate.zmisc_catty(x)"},{"path":"https://torfason.github.io/zulutils/reference/validate.zmisc_catty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal validation function for catty objects — validate.zmisc_catty","text":"x object validate","code":""},{"path":"https://torfason.github.io/zulutils/reference/validate.zmisc_catty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal validation function for catty objects — validate.zmisc_catty","text":"object","code":""},{"path":"https://torfason.github.io/zulutils/reference/yencode.html","id":null,"dir":"Reference","previous_headings":"","what":"Yet (another urlencode compatible) encoding scheme — yencode","title":"Yet (another urlencode compatible) encoding scheme — yencode","text":"Encode decode using encoding scheme superset utils::URLencode() encoding. default settings, yencode() ydecode() produce strings fully compatible urlencode encoded strings. However, functions allow custom whitelist symbols escaped encoding process, configurable escape character use place % symbol, example work storage layers like % symbol. yencoder() ydecoder() functions convenience function, return corresponding function escape whitelist already set, allowing easy use contexts expect single-argument function.","code":""},{"path":"https://torfason.github.io/zulutils/reference/yencode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yet (another urlencode compatible) encoding scheme — yencode","text":"","code":"yencode(string, escape = \"%\", whitelist = c(\"._~-\", \"][!$&'()*+,;=:/?@#\"))  yencoder(escape = \"%\", whitelist = c(\"._~-\", \"][!$&'()*+,;=:/?@#\"))  ydecode(string, escape = \"%\")  ydecoder(escape = \"%\")"},{"path":"https://torfason.github.io/zulutils/reference/yencode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Yet (another urlencode compatible) encoding scheme — yencode","text":"string string process. escape escape character use. whitelist characters escaped. See details.","code":""},{"path":"https://torfason.github.io/zulutils/reference/yencode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Yet (another urlencode compatible) encoding scheme — yencode","text":"processed (encoded decoded) string.","code":""},{"path":"https://torfason.github.io/zulutils/reference/yencode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Yet (another urlencode compatible) encoding scheme — yencode","text":"addition supplied white-list, -Z, -z, 0-9 always white-listed. restrictions white-list, except escape character must part (removed warning). course, important underlying storage layer handles white-listed characters gracefully. Note ascii letter number work perfectly fine escape character, output well-formed decoded correctly, even , 1 result escape sequences contain letter . particular, yencoder(\"Z\", whitelist=\"\") returns encoder encode string pure -Z, -z, 0-9 representation, suitable extremely limited storage layers (encode Z Z5A).","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulu_letters.html","id":null,"dir":"Reference","previous_headings":"","what":"A lookup table for the phonetic alphabet — zulu_letters","title":"A lookup table for the phonetic alphabet — zulu_letters","text":"dataset containing letters alphabet representation phonetic alphabet (alpha, bravo, charlie, ..., zulu). data formatted enframed tibble (see tibble::enframe()), suitable use contexts lookup() function.","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulu_letters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A lookup table for the phonetic alphabet — zulu_letters","text":"","code":"zulu_letters"},{"path":"https://torfason.github.io/zulutils/reference/zulu_letters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A lookup table for the phonetic alphabet — zulu_letters","text":"tibble (data frame) 26 rows 2 variables: name letters alphabet value phonetic representation letters","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in package zulutils. — zulutils-defunct","title":"Defunct functions in package zulutils. — zulutils-defunct","text":"functions listed defunct. possible,   alternative functions similar functionality mentioned.","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions in package zulutils. — zulutils-defunct","text":"","code":"move(...)"},{"path":"https://torfason.github.io/zulutils/reference/zulutils-defunct.html","id":"move","dir":"Reference","previous_headings":"","what":"move","title":"Defunct functions in package zulutils. — zulutils-defunct","text":"move() defunct. Use dplyr::relocate().","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package zulutils. — zulutils-deprecated","title":"Deprecated functions in package zulutils. — zulutils-deprecated","text":"functions listed deprecated defunct   near future. possible, alternative functions similar   functionality also mentioned. Help pages deprecated functions   available help(\"<function>-deprecated\").","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package zulutils. — zulutils-deprecated","text":"","code":"na.replace(x, replace)  lookup_enframed(x, lookup_table)"},{"path":"https://torfason.github.io/zulutils/reference/zulutils-deprecated.html","id":"na-replace","dir":"Reference","previous_headings":"","what":"na.replace","title":"Deprecated functions in package zulutils. — zulutils-deprecated","text":"na.replace() deprecated favor dplyr::coalesce().","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils-deprecated.html","id":"lookup-enframed","dir":"Reference","previous_headings":"","what":"lookup_enframed","title":"Deprecated functions in package zulutils. — zulutils-deprecated","text":"lookup_enframed() deprecated favor zmisc::lookup().","code":""},{"path":"https://torfason.github.io/zulutils/reference/zulutils.html","id":null,"dir":"Reference","previous_headings":"","what":"zulutils: Miscellaneous utility functions that the author found useful — zulutils","title":"zulutils: Miscellaneous utility functions that the author found useful — zulutils","text":"package contains various miscellaneous utility functions  author found useful time. free use  , YMMV (Mileage May Vary).","code":""},{"path":[]}]
